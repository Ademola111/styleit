"""like and unlike sessions"""
def like_post(self, post):
    desiloggedin = session.get('designer')
    loggedin = session.get('customer')
    if not self.has_liked_post(post):
        if desiloggedin:
            like = Like(like_desiid=self.like_id, like_postid=post.id)
            db.session.add(like)
        elif loggedin:
            like = Like(like_cusid=self.like_id, like_postid=post.id)
            db.session.add(like)
    
def unlike_post(self, post):
    desiloggedin = session.get('designer')
    loggedin = session.get('customer')
    if self.has_liked_post(post):
        if desiloggedin:
            Like.query.filter_by(Like.like_desiid==self.like_id, Like.like_postid==post.id).delete()
        elif loggedin:
            Like.query.filter_by(Like.like_cusid==self.like_id, Like.like_postid==post.id).delete()

def has_liked_post(self, post):
    desiloggedin = session.get('designer')
    loggedin = session.get('customer')
    if desiloggedin:
        return Like.query.filter(Like.like_desiid==self.like_id, Like.like_postid==post.id).count() > 0
    elif loggedin:
        return Like.query.filter(Like.like_cusid==self.like_id, Like.like_postid==post.id).count() > 0


request.referrer is used to redirect to same page
app.like/ route is used to redirect to same page

{% if desiloggedin not in pstn.likes|map(attribute='like_desiid')| list %}
                                    {{ pstn.likes.count() }}
                                    <i class="far fa-thumbs-up"></i>
                                    <a href="/like/{{pstn.post_id}}" style="color:rgb(0, 0, 0);"> Likes</a>
                                    {% elif loggedin not in pstn.likes|map(attribute='like_custid')| list %}
                                    {{ pstn.likes.count() }}
                                    <i class="far fa-thumbs-up"></i>
                                    <a href="/like/{{pstn.post_id}}" style="color:rgb(0, 0, 0);"> Likes</a>
                                    {% else %}


<!-- Appointment modal view -->

<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="staticBackdropLabel">Accept/Decline Appointment</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <h5> You have a booking apppointment. Kindly accept or decline this offer. </h5>
          <div class="row">
            <div class="col-md-6 text-start">
                <span class="m-2 p-2 btn btn-success" id="accept" value="accept">Accept</span>
            </div>
            <div class="col-md-6 text-end">
                <span class="mt-3 mb-3 btn btn-danger" id="decline" value="decline">Decline</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
"""image upload"""
@app.route('/image/', methods=['GET','POST'])
def image():
    desiloggedin = session.get('designer')
    if desiloggedin==None:
        return redirect('/')

    if request.method == 'GET':
        des=Designer.query.get(desiloggedin)
        return render_template('designer/post.html', des=des)

    if request.method == 'POST':
        imgname=request.form.get('name')
        imgs=request.files.getlist('img')
        postid=request.form.get('postid')
        if imgname=="":
            flash('fill all required fields', 'warning')
            return redirect('/posting/')
        else:
            for img in imgs:
                original_name=img.filename
                if original_name != "":
                    # spliting image path
                    extension = os.path.splitext(original_name)
                    if extension[1].lower() in ['.jpg', '.gif', '.png']:
                        fn=math.ceil(random.random()*10000000000)
                        saveas = str(fn) + extension[1]
                        img.save(f'styleitapp/static/images/postpic/{saveas}')     
                        # committing to Customer table
                        pos=Image(image_name=imgname, image_url=saveas,image_postid=postid, Image_desiid=desiloggedin)
                        db.session.add(pos)
            db.session.commit()
            flash("image uploaded successfuly", 'success')
            return redirect('/designer/profile/')

http://ademolacode.pythonanywhere.com/user/payverify