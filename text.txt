"""like and unlike sessions"""
def like_post(self, post):
    desiloggedin = session.get('designer')
    loggedin = session.get('customer')
    if not self.has_liked_post(post):
        if desiloggedin:
            like = Like(like_desiid=self.like_id, like_postid=post.id)
            db.session.add(like)
        elif loggedin:
            like = Like(like_cusid=self.like_id, like_postid=post.id)
            db.session.add(like)
    
def unlike_post(self, post):
    desiloggedin = session.get('designer')
    loggedin = session.get('customer')
    if self.has_liked_post(post):
        if desiloggedin:
            Like.query.filter_by(Like.like_desiid==self.like_id, Like.like_postid==post.id).delete()
        elif loggedin:
            Like.query.filter_by(Like.like_cusid==self.like_id, Like.like_postid==post.id).delete()

def has_liked_post(self, post):
    desiloggedin = session.get('designer')
    loggedin = session.get('customer')
    if desiloggedin:
        return Like.query.filter(Like.like_desiid==self.like_id, Like.like_postid==post.id).count() > 0
    elif loggedin:
        return Like.query.filter(Like.like_cusid==self.like_id, Like.like_postid==post.id).count() > 0


request.referrer is used to redirect to same page
app.like/ route is used to redirect to same page

{% if desiloggedin not in pstn.likes|map(attribute='like_desiid')| list %}
                                    {{ pstn.likes.count() }}
                                    <i class="far fa-thumbs-up"></i>
                                    <a href="/like/{{pstn.post_id}}" style="color:rgb(0, 0, 0);"> Likes</a>
                                    {% elif loggedin not in pstn.likes|map(attribute='like_custid')| list %}
                                    {{ pstn.likes.count() }}
                                    <i class="far fa-thumbs-up"></i>
                                    <a href="/like/{{pstn.post_id}}" style="color:rgb(0, 0, 0);"> Likes</a>
                                    {% else %}


<!-- Appointment modal view -->

<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="staticBackdropLabel">Accept/Decline Appointment</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <h5> You have a booking apppointment. Kindly accept or decline this offer. </h5>
          <div class="row">
            <div class="col-md-6 text-start">
                <span class="m-2 p-2 btn btn-success" id="accept" value="accept">Accept</span>
            </div>
            <div class="col-md-6 text-end">
                <span class="mt-3 mb-3 btn btn-danger" id="decline" value="decline">Decline</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
"""image upload"""
@app.route('/image/', methods=['GET','POST'])
def image():
    desiloggedin = session.get('designer')
    if desiloggedin==None:
        return redirect('/')

    if request.method == 'GET':
        des=Designer.query.get(desiloggedin)
        return render_template('designer/post.html', des=des)

    if request.method == 'POST':
        imgname=request.form.get('name')
        imgs=request.files.getlist('img')
        postid=request.form.get('postid')
        if imgname=="":
            flash('fill all required fields', 'warning')
            return redirect('/posting/')
        else:
            for img in imgs:
                original_name=img.filename
                if original_name != "":
                    # spliting image path
                    extension = os.path.splitext(original_name)
                    if extension[1].lower() in ['.jpg', '.gif', '.png']:
                        fn=math.ceil(random.random()*10000000000)
                        saveas = str(fn) + extension[1]
                        img.save(f'styleitapp/static/images/postpic/{saveas}')     
                        # committing to Customer table
                        pos=Image(image_name=imgname, image_url=saveas,image_postid=postid, Image_desiid=desiloggedin)
                        db.session.add(pos)
            db.session.commit()
            flash("image uploaded successfuly", 'success')
            return redirect('/designer/profile/')

http://ademolacode.pythonanywhere.com/user/payverify


"""activation code"""
@app.route('/activate/', methods=['GET', 'POST'])
def activationcode():
    loggedin = session.get('customer')
    desiloggedin = session.get('designer')
    
    if desiloggedin==None and loggedin== None:
        return redirect('/')
    
    if request.method=='GET':
        return render_template('user/activation.html')
    
    if request.method=='POST':
        cod=request.form.get('activationcode')
        if cod != "":
            if desiloggedin:
                dd=Designer.query.filter(Designer.desi_id==desiloggedin).first()
                mcod=dd.desi_activationcode
                if cod == mcod:
                    dd.desi_status='actived'
                    db.session.commit()
                    flash('Account activated')
                    return redirect('/user/designer/login/')
                else:
                    if cod!=mcod:
                        flash('Incorect activation code')
                        return redirect('/activate/')
            elif loggedin:
                dd=Customer.query.filter(Customer.cust_id==loggedin).first()
                mcod=dd.desi_activationcode
                if cod == mcod:
                    dd.cust_status='actived'
                    db.session.commit()
                    flash('Account activated')
                    return redirect('/user/customer/login/')
                else:
                    if cod!=mcod:
                        flash('Incorect activation code')
                        return redirect('/activate/')
        else:
            flash('activation code is empty')
            return redirect('/activate/')


# sending mail
subject="Automated Email"
sender="admin@conf.com"
recipient = [eemail]
msg=Message()
msg.subject=subject
msg.sender=sender
msg.body = "Your activation code is" + fn
msg.recipients = recipient
mail.send(msg)



from sqlalchemy import func

subq_likes = db.session.query(Like.like_postid, func.count(Like.like_id)).group_by(Like.like_postid).subquery()
subq_comments = db.session.query(Comment.com_postid, func.count(Comment.com_id)).group_by(Comment.com_postid).subquery()
subq_shares = db.session.query(Share.share_postid, func.count(Share.share_id)).group_by(Share.share_postid).subquery()

pstn = db.session.query(Posting).outerjoin(subq_likes, Posting.post_id==subq_likes.c.like_postid).outerjoin(subq_comments, Posting.post_id==subq_comments.c.com_postid).outerjoin(subq_shares, Posting.post_id==subq_shares.c.share_postid).filter(Posting.post_id==Image.image_postid, Posting.post_date==today).order_by(desc(subq_likes.c.count_1), desc(subq_comments.c.count_1), desc(subq_shares.c.count_1), desc(Posting.post_date)).limit(1000).all()


tade.ogunlade@gmail.com
STYLEIT.tadeoguntade

Igbaye - town
osun state
owolabi surname
mariam - name
omowunmi - mothers name
AS - blood group

opeyemimoses@gmail.com



 var dots=document.getElementById('3dot');
            var trashi=document.getElementById('trashi');
            var trashit=document.getElementById('trashit');
            trashi.addEventListener('click', function(){
              if(dots.style.display==='none'){
                dots.style.display='block';
              }else{
                if(dots.style.display==='block'){
                  dots.style.display='none';
                }
              };
            });

const noti = document.getElementById('notif');
            const displayelement = document.getElementById('note');

            displayelement.classList.add('hidden');

            noti.addEventListener("click", (event) => {
              if (displayelement.classList.contains('hidden')) {
                displayelement.classList.remove('hidden');
                displayelement.addEventListener('mouseleave', function(event) {
                  noti.style.display='block';
                  displayelement.classList.add('hidden');
                });
              } else {
                displayelement.classList.add('hidden');
                noti.style.display='block';
              }
            });

$(window).scroll(function() {
    if($(window).scrollTop() + $(window).height() >= $('#post-list').offset().top + $('#post-list').outerHeight()) {
        if(!loading) {
            loading = true;
            offset += 10;
            $.get('/trending?offset=' + offset, function(data) {
                if(data.trim().length == 0) {
                    // no more data to load
                } else {
                    $('.post').append(data);
                    loading = false;
                }
            });
        }
    }
});

$(window).scroll(function() {
    if($(window).scrollTop() == $(document).height() - $(window).height()) {
        if(!loading) {
            loading = true;
            offset += 10;
            $.get('/trending?offset=' + offset, function(data) {
                if(data.trim().length == 0) {
                    // no more data to load
                } else {
                    $('.posts').append(data);
                    loading = false;
                }
            });
        }
    }
});

var offset = 0;
var loading = false;

$("#post-list").on("scroll", function() {
  var element = $(this);
  if (element.scrollTop() + element.innerHeight() >= element[0].scrollHeight) {
    if (!loading) {
      loading = true;
      offset += 10;
      $.get("/trending?offset=" + offset, function(data) {
        if (data.trim().length == 0) {
          alert('No more data to load')
        } else {
          $('.post').append(data);
          loading = false;
        }
      });
    }
  }
});

# """ checking sub status for automatic deactivation """
# @app.before_request
# def before_request_func():
#     desiloggedin = session.get('designer')
#     des=Designer.query.get(desiloggedin)
#     today = date.today()
#     if desiloggedin:
#         subt=db.session.query(Subscription).filter(Subscription.sub_desiid==desiloggedin, Subscription.sub_status=='active').first()
#         # print(subt)
#         # print(today)
#         # today = '2022-12-01'
#         if subt != None:
#             if subt.sub_enddate < str(today):
#                 subt.sub_status='deactive'
#                 db.session.commit()
                
#                 commenter_email=subt.subdesiobj.desi_email
#                 custom=subt.subdesiobj.desi_businessName
#                 recipients={"custom":custom}
#                 subdeactivate_signal.send(app, comment=subt, post_author_email=commenter_email, recipients=recipients)
#         else:
#             pass
#     else:
#         subt=db.session.query(Subscription).filter(Subscription.sub_status=='active', Subscription.sub_enddate==str(today) ).all()
        
#         if subt != None:
#             for su in subt:
#                 su.sub_status='deactive'
#                 db.session.commit()
                
#                 commenter_email=su.subdesiobj.desi_email
#                 custom=su.subdesiobj.desi_businessName
#                 recipients={"custom":custom}
#                 subdeactivate_signal.send(app, comment=su, post_author_email=commenter_email, recipients=recipients)
#         else:
#             pass



//Javascript to change multiple divs       
var alltred=document.getElementById("alltrend");
var tred=document.getElementById("tred");
var allappoint=document.getElementById('allappoint');
var appoint=document.getElementById('appoint');
var allpayment=document.getElementById('allpayment');
var payment=document.getElementById('payment');
var allsub=document.getElementById('allsub');
var sublist=document.getElementById('sublist');
var allreport=document.getElementById('allreport');
var report=document.getElementById('report');

alltred.addEventListener("click", function(){
  if(tred.style.display==='none'){
    tred.style.display='block';
    appoint.style.display='none';
    payment.style.display='none';
    sublist.style.display='none';
    report.style.diplay='none';
  }else{
    if(tred.style.display==='block'){
      tred.style.display='none';
    }
  };
});

allappoint.addEventListener("click", function(){
  if(appoint.style.display==='none'){
    appoint.style.display='block';
    tred.style.display='none';
    payment.style.display='none';
    sublist.style.display='none';
    report.style.diplay='none';
  }else{
    if(appoint.style.display==='block'){
      appoint.style.display='none';
    }
  };
});

allpayment.addEventListener("click", function(){
  if(payment.style.display==='none'){
    payment.style.display='block';
    tred.style.display='none';
    appoint.style.display='none'; 
    sublist.style.display='none';
    report.style.diplay='none';
  }else{
    if(payment.style.display==='block'){
      payment.style.display='none';
    }
  };
});

allsub.addEventListener("click", function(){
  if(sublist.style.display==='none'){
    sublist.style.display='block';
    payment.style.display='none';
    tred.style.display='none';
    appoint.style.display='none';
    report.style.diplay='none';
  }else{
    if(sublist.style.display==='block'){
      sublist.style.display='none';
    }
  };
});

allreport.addEventListener("click", function(){
  if(report.style.display==='none'){
    report.style.display='block';
    sublist.style.display='none';
    payment.style.display='none';
    tred.style.display='none';
    appoint.style.display='none';
  }else{
    if(report.style.display==='block'){
      report.style.display='none';
    };
  };
});

"""day, month, year query"""
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
from datetime import datetime, timedelta

# Create an SQLAlchemy engine and session
engine = create_engine('your_database_connection_string')
Session = sessionmaker(bind=engine)
session = Session()

Base = declarative_base()

class ActivityLog(Base):
    __tablename__ = 'activitylog'
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime)
    # Other columns in your activitylog table

# Define a date range
current_date = datetime.now()
end_date = current_date + timedelta(days=1)  # You can change this for weeks, months, and years

# Query data for the current day
day_data = session.query(ActivityLog).filter(
    ActivityLog.timestamp >= current_date,
    ActivityLog.timestamp < end_date
).all()

# Query data for the current week
week_start = current_date - timedelta(days=current_date.weekday())
week_end = week_start + timedelta(weeks=1)
week_data = session.query(ActivityLog).filter(
    ActivityLog.timestamp >= week_start,
    ActivityLog.timestamp < week_end
).all()

# Query data for the current month
month_start = datetime(current_date.year, current_date.month, 1)
month_end = month_start.replace(month=month_start.month + 1) if month_start.month < 12 else month_start.replace(year=month_start.year + 1, month=1)
month_data = session.query(ActivityLog).filter(ActivityLog.timestamp >= month_start, ActivityLog.timestamp < month_end).all()

# Query data for the current year
year_start = datetime(current_date.year, 1, 1)
year_end = datetime(current_date.year + 1, 1, 1)
year_data = session.query(ActivityLog).filter(ActivityLog.timestamp >= year_start, ActivityLog.timestamp < year_end).all()

# Define previous and next periods
previous_day = current_date - timedelta(days=1)
next_day = current_date + timedelta(days=1)
previous_week = current_date - timedelta(weeks=1)
next_week = current_date + timedelta(weeks=1)
previous_month = month_start - timedelta(days=1)
next_month = month_end

# Query data for the previous and next day, week, month, and year
previous_day_data = session.query(ActivityLog).filter(
    ActivityLog.timestamp >= previous_day,
    ActivityLog.timestamp < current_date
).all()

next_day_data = session.query(ActivityLog).filter(
    ActivityLog.timestamp >= current_date,
    ActivityLog.timestamp < next_day
).all()

# Repeat the process for previous and next week, month, and year

session.close()
